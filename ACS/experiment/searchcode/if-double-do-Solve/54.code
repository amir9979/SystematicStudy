return new double[]{cbrt(div(-c[0], c[3]))};
}

if (c[0] == 0) {
double[] quadResults = Solver.Quadratic.solve(c[1], c[2], c[3]);
Set<Double> results = new HashSet<Double>();
*                                  IllegalArgumentException} is thrown. Please notice, even if coefficients may be zero, they must be provided.
*/
public abstract double[] solve(double... c) throws IllegalArgumentException;

}

