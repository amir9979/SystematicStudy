public static IAST RULES = List(
ISetDelayed(Int(Times(Plus(A_DEFAULT,Times(B_DEFAULT,x_)),Power(Plus(a_,Times(c_DEFAULT,Sqr(x_))),p_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,x_)),m_)),x_Symbol),
Condition(Plus(Times(Plus(Times(ASymbol,e),Times(CN1,BSymbol,d)),Power(Plus(d,Times(e,x)),Plus(m,C1)),Power(Plus(a,Times(c,Sqr(x))),Plus(p,C1)),Power(Times(Plus(m,C1),Plus(Times(c,Sqr(d)),Times(a,Sqr(e)))),-1)),Times(Power(Times(Plus(m,C1),Plus(Times(c,Sqr(d)),Times(a,Sqr(e)))),-1),Int(Times(Power(Plus(d,Times(e,x)),Plus(m,C1)),Simp(Plus(Times(Plus(Times(ASymbol,c,d),Times(a,BSymbol,e)),Plus(m,C1)),Times(CN1,c,Plus(Times(ASymbol,e),Times(CN1,BSymbol,d)),Plus(m,Times(C2,p),C3),x)),x),Power(Plus(a,Times(c,Sqr(x))),p)),x))),And(And(And(FreeQ(List(a,c,d,e,ASymbol,BSymbol,m,p),x),NonzeroQ(Plus(Times(BSymbol,d),Times(CN1,ASymbol,e)))),NonzeroQ(Plus(Times(c,Sqr(d)),Times(a,Sqr(e))))),If(RationalQ(m),Less(m,CN1),And(NonzeroQ(Plus(m,C1)),SumSimplerQ(m,C1)))))),

